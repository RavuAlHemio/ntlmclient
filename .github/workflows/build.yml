name: ntlmclient build
on: [push]
jobs:
  build-arch:
    strategy:
      matrix:
        build_mode: ["debug", "release"]
        rust_version: ["stable", "1.63.0", "1.71.1"]
        # stable: current version (build & test)
        # 1.63.0: MSRV for library (build; tests not possible)
        # 1.71.1: MSRV for tests (build & test)
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    env:
      RUST_BACKTRACE: 1
    steps:
      - name: update packages
        run: pacman -Syu --noconfirm
      - name: install packages
        run: pacman -S --needed --noconfirm rustup git
      - name: install Rust
        run: rustup install ${{ matrix.rust_version }}
      - name: check out repository code
        uses: actions/checkout@v4
      - name: run debug build
        run: cargo build --features=${{ matrix.features }}
        if: matrix.build_mode == 'debug'
      - name: run release build
        run: cargo build --features=${{ matrix.features }} --release
        if: matrix.build_mode == 'release'
      - name: run debug tests
        run: cargo test --features=${{ matrix.features }}
        if: matrix.build_mode == 'debug' && matrix.rust_version != '1.63.0'
      - name: run release tests
        run: cargo test --features=${{ matrix.features }} --release
        if: matrix.build_mode == 'release' && matrix.rust_version != '1.63.0'
  build-ubuntu:
    strategy:
      matrix:
        build_mode: ["debug", "release"]
        ubuntu_version: ["focal", "jammy", "noble"]
        rust_version: ["stable", "1.63.0", "1.71.1"]
    runs-on: ubuntu-latest
    container: ubuntu:${{ matrix.ubuntu_version }}
    env:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      DEBIAN_FRONTEND: noninteractive
      TZ: Etc/UTC
      RUST_BACKTRACE: 1
    steps:
      - name: update apt database
        run: apt-get -y update
      - name: update packages
        run: apt-get -y dist-upgrade
      - name: install packages
        run: apt-get -y install curl build-essential git
      - name: install rustup
        run: "curl --proto '=https' -sSf https://sh.rustup.rs | sh -s -- -y"
      - name: install Rust
        run: '. $HOME/.cargo/env && rustup install ${{ matrix.rust_version }}'
      - name: check out repository code
        uses: actions/checkout@v4
      - name: run debug build
        run: '. $HOME/.cargo/env && cargo build --features=${{ matrix.features }}'
        if: matrix.build_mode == 'debug'
      - name: run release build
        run: '. $HOME/.cargo/env && cargo build --features=${{ matrix.features }} --release'
        if: matrix.build_mode == 'release'
      - name: run debug tests
        run: '. $HOME/.cargo/env && cargo test --features=${{ matrix.features }}'
        if: matrix.build_mode == 'debug' && matrix.rust_version != '1.63.0'
      - name: run release tests
        run: '. $HOME/.cargo/env && cargo test --features=${{ matrix.features }} --release'
        if: matrix.build_mode == 'release' && matrix.rust_version != '1.63.0'
  build-windows:
    strategy:
      matrix:
        build_mode: ["debug", "release"]
    runs-on: windows-latest
    env:
      RUST_BACKTRACE: 1
    steps:
      - name: check out repository code
        uses: actions/checkout@v4
      - name: run debug build
        run: cargo build --features=${{ matrix.features }}
        if: matrix.build_mode == 'debug'
      - name: run release build
        run: cargo build --features=${{ matrix.features }} --release
        if: matrix.build_mode == 'release'
      - name: run debug tests
        run: cargo test --features=${{ matrix.features }}
        if: matrix.build_mode == 'debug'
      - name: run release tests
        run: cargo test --features=${{ matrix.features }} --release
        if: matrix.build_mode == 'release'
  build-macos:
    strategy:
      matrix:
        build_mode: ["debug", "release"]
    runs-on: macos-latest
    env:
      RUST_BACKTRACE: 1
    steps:
      - name: check out repository code
        uses: actions/checkout@v4
      - name: run debug build
        run: cargo build --features=${{ matrix.features }}
        if: matrix.build_mode == 'debug'
      - name: run release build
        run: cargo build --features=${{ matrix.features }} --release
        if: matrix.build_mode == 'release'
      - name: run debug tests
        run: cargo test --features=${{ matrix.features }}
        if: matrix.build_mode == 'debug'
      - name: run release tests
        run: cargo test --features=${{ matrix.features }} --release
        if: matrix.build_mode == 'release'
